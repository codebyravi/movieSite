{"version":3,"sources":["webpack:///./src/app/playlist/playlist-routing.module.ts","webpack:///./src/app/playlist/playlist.component.html","webpack:///./src/app/playlist/playlist.component.scss","webpack:///./src/app/playlist/playlist.component.ts","webpack:///./src/app/playlist/playlist.module.ts"],"names":[],"mappings":"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","file":"app-playlist-playlist-module.js","sourcesContent":["import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PlaylistComponent } from './playlist.component';\n\nconst routes: Routes = [\n  { path: '', component: PlaylistComponent }\n];\n\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\n","module.exports = \"<div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n  <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n</div>\\n<ng-template [ngIf]=\\\"!isLoadingResults\\\">\\n  <h2>{{ \\\"Watch later.Title\\\" | translate }}</h2>\\n  <mat-tab-group class=\\\"playlist__tab\\\">\\n    <mat-tab label=\\\"{{ 'Watch later.To watch' | translate }}\\\">\\n      <div *ngIf=\\\"moviesToWatch.length > 0; else noData\\\">\\n        <mat-nav-list *ngFor=\\\"let movie of moviesToWatch\\\">\\n          <a mat-list-item [routerLink]=\\\"['/movie', movie.movieId]\\\">\\n            <div\\n              matListAvatar\\n              class=\\\"icon-container\\\"\\n              [ngStyle]=\\\"{\\n                'background-image':\\n                  'url(' +\\n                  'https://image.tmdb.org/t/p/original' +\\n                  movie.poster_path +\\n                  ')'\\n              }\\\"\\n            >\\n              <mat-icon *ngIf=\\\"!movie.poster_path\\\" class=\\\"icon-movie\\\"\\n                >movie</mat-icon\\n              >\\n            </div>\\n            <h3 matLine>{{ movie.original_title }}</h3>\\n            <p matLine>{{ movie.release_date | date }}</p>\\n          </a>\\n          <mat-action-list>\\n            <button mat-icon-button (click)=\\\"shareDialog(movie)\\\">\\n              <mat-icon>share</mat-icon>\\n            </button>\\n            <button mat-icon-button (click)=\\\"deleteMovie(movie.movieId)\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n            <button mat-icon-button (click)=\\\"watchedMovie(movie.movieId, true)\\\">\\n              <mat-icon>visibility</mat-icon>\\n            </button>\\n          </mat-action-list>\\n          <div class=\\\"actions\\\">\\n            <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\">\\n              <button mat-menu-item (click)=\\\"shareDialog(movie)\\\">\\n                <mat-icon>share</mat-icon>\\n                <span>{{ \\\"Btn-share\\\" | translate }}</span>\\n              </button>\\n              <button mat-menu-item (click)=\\\"deleteMovie(movie.movieId)\\\">\\n                <mat-icon>delete</mat-icon>\\n                <span>{{ \\\"Btn-delete\\\" | translate }}</span>\\n              </button>\\n              <button mat-menu-item (click)=\\\"watchedMovie(movie.movieId, true)\\\">\\n                <mat-icon>visibility</mat-icon>\\n                <span>{{ \\\"Watch later.Watched?\\\" | translate }}</span>\\n              </button>\\n            </mat-menu>\\n          </div>\\n        </mat-nav-list>\\n      </div>\\n      <ng-template #noData>\\n        <h3>\\n          {{ \\\"Watch later.No movies\\\" | translate }}\\n          <mat-icon>sentiment_very_dissatisfied</mat-icon>\\n        </h3>\\n      </ng-template>\\n    </mat-tab>\\n    <mat-tab label=\\\"{{ 'Watch later.Watched' | translate }}\\\">\\n      <div *ngIf=\\\"moviesWatched.length > 0; else noData\\\">\\n        <mat-nav-list *ngFor=\\\"let movie of moviesWatched\\\">\\n          <a mat-list-item [routerLink]=\\\"['/movie', movie.movieId]\\\">\\n            <div\\n              matListAvatar\\n              class=\\\"icon-container\\\"\\n              [ngStyle]=\\\"{\\n                'background-image':\\n                  'url(' +\\n                  'https://image.tmdb.org/t/p/original' +\\n                  movie.poster_path +\\n                  ')'\\n              }\\\"\\n            >\\n              <mat-icon *ngIf=\\\"!movie.poster_path\\\" class=\\\"icon-movie\\\"\\n                >movie</mat-icon\\n              >\\n            </div>\\n            <h3 matLine>{{ movie.original_title }}</h3>\\n            <p matLine>{{ movie.release_date | date }}</p>\\n          </a>\\n          <mat-action-list>\\n            <button mat-icon-button (click)=\\\"shareDialog(movie)\\\">\\n              <mat-icon>share</mat-icon>\\n            </button>\\n            <button mat-icon-button (click)=\\\"deleteMovie(movie.movieId)\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n            <button mat-icon-button (click)=\\\"watchedMovie(movie.movieId, false)\\\">\\n              <mat-icon>visibility_off</mat-icon>\\n            </button>\\n          </mat-action-list>\\n          <div class=\\\"actions\\\">\\n            <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\">\\n              <button mat-menu-item (click)=\\\"shareDialog(movie)\\\">\\n                <mat-icon>share</mat-icon>\\n                <span>{{ \\\"Btn-share\\\" | translate }}</span>\\n              </button>\\n              <button mat-menu-item (click)=\\\"deleteMovie(movie.movieId)\\\">\\n                <mat-icon>delete</mat-icon>\\n                <span>{{ \\\"Btn-delete\\\" | translate }}</span>\\n              </button>\\n              <button\\n                mat-menu-item\\n                (click)=\\\"watchedMovie(movie.movieId, false)\\\"\\n              >\\n                <mat-icon>visibility_off</mat-icon>\\n                <span>{{ \\\"Watch later.Not Watched\\\" | translate }}</span>\\n              </button>\\n            </mat-menu>\\n          </div>\\n        </mat-nav-list>\\n      </div>\\n      <ng-template #nodata>\\n        <h3>\\n          {{ \\\"Watch later.No movies\\\" | translate }}\\n          <mat-icon>sentiment_very_dissatisfied</mat-icon>\\n        </h3>\\n      </ng-template>\\n    </mat-tab>\\n  </mat-tab-group>\\n</ng-template>\\n\"","module.exports = \".playlist__tab .mat-nav-list {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center; }\\n\\n.playlist__tab a.mat-list-item {\\n  flex: 1;\\n  overflow: hidden; }\\n\\n.playlist__tab a.mat-list-item:hover {\\n    background: #e3e0cf; }\\n\\n.playlist__tab .mat-list {\\n  display: none; }\\n\\n@media only screen and (min-width: 731px) {\\n    .playlist__tab .mat-list {\\n      display: flex; } }\\n\\n.playlist__tab .mat-list-base button {\\n  color: #9E9E9E; }\\n\\n.playlist__tab .actions {\\n  display: flex;\\n  color: #FFF; }\\n\\n@media only screen and (min-width: 731px) {\\n    .playlist__tab .actions {\\n      display: none; } }\\n\\n.playlist__tab /deep/ .mat-list-text h3 {\\n  color: #9fa8a3;\\n  text-align: left; }\\n\\n.playlist__tab /deep/ .mat-list-text p {\\n  color: #FFF;\\n  text-align: left; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYXZpdmFsbHVyaS9EZXNrdG9wL21vdmllU2l0ZS9zcmMvYXBwL3BsYXlsaXN0L3BsYXlsaXN0LmNvbXBvbmVudC5zY3NzIiwiL1VzZXJzL3Jhdml2YWxsdXJpL0Rlc2t0b3AvbW92aWVTaXRlL3NyYy9hc3NldHMvc2Nzcy9wYWxldHRlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0s7RUFHTyxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQixFQUFBOztBQUwxQjtFQVFPLE9BQU87RUFDUCxnQkFBZ0IsRUFBQTs7QUFUdkI7SUFZVyxtQkNYSSxFQUFBOztBRERmO0VBZ0JPLGFBQWEsRUFBQTs7QUFDYjtJQWpCUDtNQWtCVyxhQUFhLEVBQUEsRUFFcEI7O0FBcEJKO0VBdUJXLGNDeEJGLEVBQUE7O0FEQ1Q7RUEyQk8sYUFBYTtFQUNiLFdDL0JBLEVBQUE7O0FEaUNBO0lBOUJQO01BK0JXLGFBQWEsRUFBQSxFQUVwQjs7QUFqQ0o7RUFvQ1csY0NwQ087RURxQ1AsZ0JBQWdCLEVBQUE7O0FBckMzQjtFQXdDVyxXQzNDSjtFRDRDSSxnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3BsYXlsaXN0L3BsYXlsaXN0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAnLi4vLi4vYXNzZXRzL3Njc3MvcGFsZXR0ZSc7XG5cbi5wbGF5bGlzdCB7XG4gICAgJl9fdGFiIHtcblxuICAgICAgICAubWF0LW5hdi1saXN0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBhLm1hdC1saXN0LWl0ZW0ge1xuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICRiYWNrZ3JvdW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC5tYXQtbGlzdCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3MzFweCkge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLm1hdC1saXN0LWJhc2UgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgYnV0dG9uIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJGdyZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLmFjdGlvbnMge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGNvbG9yOiAkd2hpdGU7XG5cbiAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzMxcHgpIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC9kZWVwLyAubWF0LWxpc3QtdGV4dCB7XG4gICAgICAgICAgICBoMyB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICRwcmltYXJ5LWxpZ2h0O1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHdoaXRlO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIkd2hpdGU6ICNGRkY7XG4kYmxhY2s6ICNjNWQ1Y2I7XG4kZ3JleTogIzlFOUU5RTtcbiRwcmltYXJ5LWxpZ2h0OiAjOWZhOGEzO1xuJGJhY2tncm91bmQ6ICNlM2UwY2Y7XG4kZmFjZWJvb2s6ICM0MjY3YjI7XG4kdHdpdHRlcjogIzQyODVmNDtcbiRncmVlbjogIzRjYWY1MDtcbiR5ZWxsb3c6ICNmZmMxMDc7XG4kdGVhbCA6ICMwMDk2ODg7Il19 */\"","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { ShareModalComponent } from '../shared/component/share-modal/share-modal.component';\nimport { MovieDatabaseModel } from '../shared/model/movie-database.model';\nimport { DatabaseService } from '../shared/service/database/database.service';\n\n@Component({\n  selector: 'app-playlist',\n  templateUrl: './playlist.component.html',\n  styleUrls: ['./playlist.component.scss']\n})\nexport class PlaylistComponent implements OnInit, OnDestroy {\n  isLoadingResults: boolean;\n  moviesToWatch: Array<any> = [];\n  moviesWatched: Array<any> = [];\n  sub: Subscription;\n\n  constructor(\n    private databaseService: DatabaseService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private translateService: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.isLoadingResults = true;\n    this.sub = this.databaseService.getMoviesCategoriesDefault('MovieLater').subscribe(response => {\n      // tslint:disable-next-line: no-string-literal\n      this.moviesToWatch = response.filter(val => val['watched'] === false);\n      // tslint:disable-next-line: no-string-literal\n      this.moviesWatched = response.filter(val => val['watched'] === true);\n      this.isLoadingResults = false;\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  deleteMovie(id: number) {\n    this.databaseService.deleteMoviesCategoriesDefault('MovieLater', id, error => {\n      if (error) {\n        this.snackBar.open(error, 'Hide', { duration: 5000 });\n      } else {\n        this.translateService.get('Error.List-updated').subscribe(results => this.snackBar.open(results, '', { duration: 2000 }));      }\n    });\n  }\n\n  shareDialog(movie: MovieDatabaseModel): void {\n    this.dialog.open(ShareModalComponent, {\n      data: { id: movie.movieId, original_title: movie.original_title }\n    });\n  }\n\n  watchedMovie(movieId: number, watched: boolean) {\n    this.databaseService.updateMovieCategoriesDefault(movieId, watched, error => {\n      if (error) {\n        this.snackBar.open(error, 'Hide', { duration: 5000 });\n      } else {\n        this.translateService.get('Error.List-updated').subscribe(results => this.snackBar.open(results, '', { duration: 2000 }));      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { PlaylistComponent } from './playlist.component';\nimport { routing } from './playlist-routing.module';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    routing,\n  ],\n  declarations: [\n    PlaylistComponent,\n  ]\n})\nexport class PlaylistModule { }\n"],"sourceRoot":""}